# -*- coding: utf-8 -*-
"""k-mediods_module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DB3IoPVuqKEUc7Hh7j3BFDDROps3YDCO
"""

import numpy as np
from sklearn.base import BaseEstimator, ClusterMixin
from sklearn.metrics import pairwise_distances_argmin_min
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

class KMedoids(BaseEstimator, ClusterMixin):
    def __init__(self, n_clusters=8, max_iter=300, random_state=None):
        self.n_clusters = n_clusters
        self.max_iter = max_iter
        self.random_state = random_state

    def fit(self, X):
        np.random.seed(self.random_state)

        # Initialize medoids randomly
        n_samples, n_features = X.shape
        medoids_idx = np.random.choice(n_samples, size=self.n_clusters, replace=False)
        medoids = X[medoids_idx]

        for _ in range(self.max_iter):
            # Assign each point to the nearest medoid
            labels, distances = pairwise_distances_argmin_min(X, medoids)

            # Compute the new medoids as the point with the minimum total distance
            new_medoids = np.empty_like(medoids)
            for i in range(self.n_clusters):
                cluster_points = X[labels == i]
                total_distances = np.sum(pairwise_distances_argmin_min(cluster_points, cluster_points)[1])
                best_medoid_idx = np.argmin(total_distances)
                new_medoids[i] = cluster_points[best_medoid_idx]

            # Check for convergence
            if np.all(new_medoids == medoids):
                break

            medoids = new_medoids

        self.medoids_ = medoids
        self.labels_ = labels

    def fit_predict(self, X):
        self.fit(X)
        return self.labels_



# Create synthetic data
X, _ = make_blobs(n_samples=300, centers=4, random_state=0, cluster_std=1.0)

# Fit the KMedoids model
kmedoids = KMedoids(n_clusters=4, random_state=0)
labels = kmedoids.fit_predict(X)

# Plot the results
plt.scatter(X[:, 0], X[:, 1], c=labels)
plt.scatter(kmedoids.medoids_[:, 0], kmedoids.medoids_[:, 1], c='red', marker='x', s=100)
plt.show()